
ex3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000162  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005cd  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000054e  00000000  00000000  000007bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000243  00000000  00000000  00000d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002dd  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001251  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

char x;

int main(void) {

	DDRA = 0b11111111; // Αρχικοποίηση του PORTA ως output
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0b00000000; // Αρχικοποίηση του PORTC ως input
  80:	14 ba       	out	0x14, r1	; 20

	x = 0b00000001;	// Αρχικοποίηση μεταβλητής για αρχικά αναμμένο LED
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

	PORTA = x;
  88:	8b bb       	out	0x1b, r24	; 27

	while(1) {
		if ((PINC & 0b0001) == 0b0001) { // Έλεγχος πατήματος push-button SW0
  8a:	98 9b       	sbis	0x13, 0	; 19
  8c:	0d c0       	rjmp	.+26     	; 0xa8 <main+0x2c>

			while ((PINC & 0b0001) == 0b0001); // Έλεγχος επαναφοράς push-button SW0
  8e:	98 99       	sbic	0x13, 0	; 19
  90:	fe cf       	rjmp	.-4      	; 0x8e <main+0x12>

			// SW0: Ολίσθηση-περιστροφή του led μία θέση αριστερά (κυκλικά)
			
			if (x == 0b10000000)
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	80 38       	cpi	r24, 0x80	; 128
  98:	21 f4       	brne	.+8      	; 0xa2 <main+0x26>
			x = 0b00000001;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  a0:	03 c0       	rjmp	.+6      	; 0xa8 <main+0x2c>
			else
			x = x << 1;
  a2:	88 0f       	add	r24, r24
  a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}

		if ((PINC & 0b0010) == 0b0010) { // Έλεγχος πατήματος push-button SW1
  a8:	99 9b       	sbis	0x13, 1	; 19
  aa:	0d c0       	rjmp	.+26     	; 0xc6 <main+0x4a>

			while ((PINC & 0b0010) == 0b0010); // Έλεγχος επαναφοράς push-button SW1
  ac:	99 99       	sbic	0x13, 1	; 19
  ae:	fe cf       	rjmp	.-4      	; 0xac <main+0x30>

			// SW1: Ολίσθηση-περιστροφή του led μία θέση δεξιά (κυκλικά)
			
			if (x == 0b00000001)
  b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	21 f4       	brne	.+8      	; 0xc0 <main+0x44>
			x = 0b10000000;
  b8:	80 e8       	ldi	r24, 0x80	; 128
  ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  be:	03 c0       	rjmp	.+6      	; 0xc6 <main+0x4a>
			else
			x = x >> 1;
  c0:	86 95       	lsr	r24
  c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}

		if ((PINC & 0b0100) == 0b0100) { // Έλεγχος πατήματος push-button SW2
  c6:	9a 9b       	sbis	0x13, 2	; 19
  c8:	05 c0       	rjmp	.+10     	; 0xd4 <main+0x58>

			while ((PINC & 0b0100) == 0b0100); // Έλεγχος επαναφοράς push-button SW2
  ca:	9a 99       	sbic	0x13, 2	; 19
  cc:	fe cf       	rjmp	.-4      	; 0xca <main+0x4e>

			// SW2: Μετακίνηση του αναμμένου led στην θέση MSB (led7)
			
			x = 0b10000000;
  ce:	80 e8       	ldi	r24, 0x80	; 128
  d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}

		if ((PINC & 0b1000) == 0b1000) { // Έλεγχος πατήματος push-button SW3
  d4:	9b 9b       	sbis	0x13, 3	; 19
  d6:	05 c0       	rjmp	.+10     	; 0xe2 <main+0x66>

			while ((PINC & 0b1000) == 0b1000); // Έλεγχος επαναφοράς push-button SW3
  d8:	9b 99       	sbic	0x13, 3	; 19
  da:	fe cf       	rjmp	.-4      	; 0xd8 <main+0x5c>
			
			// SW3: Μετακίνηση του αναμμένου led στην αρχική του θέση LSB (led0)
			
			x = 0b00000001;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}

		PORTA = x; // Έξοδος σε PORTA
  e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e6:	8b bb       	out	0x1b, r24	; 27
	}
  e8:	d0 cf       	rjmp	.-96     	; 0x8a <main+0xe>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
