
ex2 with C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  0000015c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000641  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000055f  00000000  00000000  00000829  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000247  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f1  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000012e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include <avr/io.h>

char F0, F1, F, A, B, C, D, dummy;

int main(void) {
	DDRA = 0b11111111;  // Αρχικοποίηση PORTA ως output
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0b00000000; // Αρχικοποίηση PORTB ως input
  80:	17 ba       	out	0x17, r1	; 23
	
	while (1) {
		A = PINA & 0b00000001;
  82:	49 b3       	in	r20, 0x19	; 25
  84:	54 2f       	mov	r21, r20
  86:	51 70       	andi	r21, 0x01	; 1
  88:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <A>
		
		B = PINA & 0b00000010;
  8c:	99 b3       	in	r25, 0x19	; 25
		B = B >> 1;
  8e:	91 fb       	bst	r25, 1
  90:	44 27       	eor	r20, r20
  92:	40 f9       	bld	r20, 0
  94:	40 93 63 00 	sts	0x0063, r20	; 0x800063 <B>
		
		C = PINA & 0b00000100;
  98:	99 b3       	in	r25, 0x19	; 25
		C = C >> 2;
  9a:	92 fb       	bst	r25, 2
  9c:	99 27       	eor	r25, r25
  9e:	90 f9       	bld	r25, 0
  a0:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <C>
		
		D = PINA & 0b00001000;
  a4:	29 b3       	in	r18, 0x19	; 25
		D = D >> 3;
  a6:	23 fb       	bst	r18, 3
  a8:	88 27       	eor	r24, r24
  aa:	80 f9       	bld	r24, 0
  ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		F0 = ~(A & B & ~C | C & D);
  b0:	35 2f       	mov	r19, r21
  b2:	34 23       	and	r19, r20
  b4:	29 2f       	mov	r18, r25
  b6:	20 95       	com	r18
  b8:	23 23       	and	r18, r19
  ba:	39 2f       	mov	r19, r25
  bc:	38 23       	and	r19, r24
  be:	23 2b       	or	r18, r19
  c0:	20 95       	com	r18
		F0 = F0 & 0b00000001;
  c2:	21 70       	andi	r18, 0x01	; 1
  c4:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <F0>
		
		F1 = (A | B) & (C | D);
  c8:	45 2b       	or	r20, r21
  ca:	98 2b       	or	r25, r24
  cc:	84 2f       	mov	r24, r20
  ce:	89 23       	and	r24, r25
		F1 = F1 << 1;
  d0:	88 0f       	add	r24, r24
  d2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <F1>
		
		F = F0 | F1;
  d6:	82 2b       	or	r24, r18
  d8:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <F>
		PORTB = F;
  dc:	88 bb       	out	0x18, r24	; 24
		
		dummy = 0; // dummy variable used for breakpoint
  de:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <dummy>
  e2:	cf cf       	rjmp	.-98     	; 0x82 <main+0x6>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
