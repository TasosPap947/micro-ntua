
ex2 with C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  00000164  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000643  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000055f  00000000  00000000  00000833  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000247  00000000  00000000  00000d92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002eb  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000012eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include <avr/io.h>

char A,B,C,D,F0,F1,OUT,dummy;
int main (void)
{
	DDRA = 0x00 ; // initialize PINA as input
  7c:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0xFF ; // initialize PORTB as output
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	87 bb       	out	0x17, r24	; 23

	while (1) {
		A = PINA & 0x01 ; // LSB (1st bit)
  82:	39 b3       	in	r19, 0x19	; 25
  84:	53 2f       	mov	r21, r19
  86:	51 70       	andi	r21, 0x01	; 1
  88:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <A>
		B = PINA & 0x02 ; // 2nd bit
  8c:	99 b3       	in	r25, 0x19	; 25
  8e:	39 2f       	mov	r19, r25
  90:	32 70       	andi	r19, 0x02	; 2
  92:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <B>
		C = PINA & 0x04 ; // 3rd bit
  96:	99 b3       	in	r25, 0x19	; 25
  98:	94 70       	andi	r25, 0x04	; 4
  9a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <C>
		D = PINA & 0x08 ; // 4th bit
  9e:	29 b3       	in	r18, 0x19	; 25
		B = B>>1; //shifting right
  a0:	36 95       	lsr	r19
  a2:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <B>
		C = C>>2; // shifting right
  a6:	96 95       	lsr	r25
  a8:	96 95       	lsr	r25
  aa:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <C>
		D = D>>3; // shifting right, all bits are in the 1st place (LSB)
  ae:	23 fb       	bst	r18, 3
  b0:	88 27       	eor	r24, r24
  b2:	80 f9       	bld	r24, 0
  b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		F0 = ~((A & B & (~C)) | (C & D)); // expression 1
  b8:	45 2f       	mov	r20, r21
  ba:	43 23       	and	r20, r19
  bc:	29 2f       	mov	r18, r25
  be:	20 95       	com	r18
  c0:	24 23       	and	r18, r20
  c2:	49 2f       	mov	r20, r25
  c4:	48 23       	and	r20, r24
  c6:	24 2b       	or	r18, r20
  c8:	20 95       	com	r18
		F0 = F0 & 0x01;  
  ca:	21 70       	andi	r18, 0x01	; 1
  cc:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <F0>

		F1 = ( (A|B) & (C|D) ) ; // expression 2
  d0:	35 2b       	or	r19, r21
  d2:	98 2b       	or	r25, r24
  d4:	83 2f       	mov	r24, r19
  d6:	89 23       	and	r24, r25
		F1 = F1<<1; // shift left, F1 is in the 2nd bit place, where 1st place = LSB place
  d8:	88 0f       	add	r24, r24
  da:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <F1>
		OUT = F0 | F1 ;
  de:	82 2b       	or	r24, r18
  e0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <OUT>
		PORTB = OUT;
  e4:	88 bb       	out	0x18, r24	; 24
		dummy = 0;
  e6:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <dummy>
  ea:	cb cf       	rjmp	.-106    	; 0x82 <main+0x6>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
